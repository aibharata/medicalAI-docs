{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Medical-AI is a AI framework specifically for Medical Applications Documentation : https://aibharata.github.io/medicalAI/ Source Code : https://github.com/aibharata/medicalai Medical-AI is a AI framework for rapid prototyping of AI for Medical Applications. Installation $ pip install medicalai ---> 100% Requirements Python Version : 3.5-3.7 (Doesn't Work on 3.8 Since Tensorflow does not support 3.8 yet. Dependencies: Numpy, Tensorflow, Seaborn, Matplotlib, Pandas NOTE: Dependency libraries are automatically installed. No need for user to install them manually. Usage Importing the Library import medicalai as mai Using Templates You can use the following templates to perform specific Tasks Load Dataset From Folder Set the path of the dataset and set the target dimension of image that will be input to AI network. trainSet,testSet,labelNames =mai.datasetFromFolder(datasetFolderPath, targetDim = (96,96)).load_dataset() - trainSet contains 'data' and 'labels' accessible by trainSet.data and trainSet.labels - testSet contains 'data' and 'labels' accessible by testSet.data and testSet.labels - labelNames contains class names/labels Check Loaded Dataset Size print(trainSet.data.shape) print(trainSet.labels.shape) Run Training and Save Model trainer = mai.TRAIN_ENGINE() trainer.train_and_save_model(AI_NAME= 'tinyMedNet', MODEL_SAVE_NAME='PATH_WHERE_MODEL_IS_SAVED_TO', trainSet, testSet, OUTPUT_CLASSES, RETRAIN_MODEL= True, BATCH_SIZE= 32, EPOCHS= 10, LEARNING_RATE= 0.001) Plot Training Loss and Accuracy trainer.plot_train_acc_loss() Plot Confusion matrix of test data trainer.plot_confusion_matrix(labelNames,title='Confusion Matrix of Trained Model on Test Dataset') Loading Model for Prediction model = mai.load_model_and_weights(modelName = 'PATH_WHERE_MODEL_IS_SAVED_TO') Predict With Labels mai.predict_labels(model, testSet.data[0:2], expected_output =testSet.labels[0:2], labelNames=labels, top_preds=3) Get Just Values of Prediction without postprocessing model.predict(testSet.data[0:2]) Advanced Usage Code snippet for Training Using Medical-AI ## Setup AI Model Manager with required AI. model = mai.modelManager(AI_NAME= AI_NAME, modelName = MODEL_SAVE_NAME, x_train = train_data, OUTPUT_CLASSES = OUTPUT_CLASSES, RETRAIN_MODEL= RETRAIN_MODEL) # Start Training result = mai.train(model, train_data, train_labels, BATCH_SIZE, EPOCHS, LEARNING_RATE, validation_data=(test_data, test_labels), callbacks=['tensorboard']) # Evaluate Trained Model on Test Data model.evaluate(test_data, test_labels) # Plot Accuracy vs Loss for Training mai.plot_training_metrics(result) #Save the Trained Model mai.save_model_and_weights(model, outputName= MODEL_SAVE_NAME) Automated Tests To Check the tests pytest To See Output of Print Statements pytest -s","title":"Home"},{"location":"#installation","text":"$ pip install medicalai ---> 100%","title":"Installation"},{"location":"#requirements","text":"Python Version : 3.5-3.7 (Doesn't Work on 3.8 Since Tensorflow does not support 3.8 yet. Dependencies: Numpy, Tensorflow, Seaborn, Matplotlib, Pandas NOTE: Dependency libraries are automatically installed. No need for user to install them manually.","title":"Requirements"},{"location":"#usage","text":"","title":"Usage"},{"location":"#importing-the-library","text":"import medicalai as mai","title":"Importing the Library"},{"location":"#using-templates","text":"You can use the following templates to perform specific Tasks","title":"Using Templates"},{"location":"#load-dataset-from-folder","text":"Set the path of the dataset and set the target dimension of image that will be input to AI network. trainSet,testSet,labelNames =mai.datasetFromFolder(datasetFolderPath, targetDim = (96,96)).load_dataset() - trainSet contains 'data' and 'labels' accessible by trainSet.data and trainSet.labels - testSet contains 'data' and 'labels' accessible by testSet.data and testSet.labels - labelNames contains class names/labels","title":"Load Dataset From Folder"},{"location":"#check-loaded-dataset-size","text":"print(trainSet.data.shape) print(trainSet.labels.shape)","title":"Check Loaded Dataset Size"},{"location":"#run-training-and-save-model","text":"trainer = mai.TRAIN_ENGINE() trainer.train_and_save_model(AI_NAME= 'tinyMedNet', MODEL_SAVE_NAME='PATH_WHERE_MODEL_IS_SAVED_TO', trainSet, testSet, OUTPUT_CLASSES, RETRAIN_MODEL= True, BATCH_SIZE= 32, EPOCHS= 10, LEARNING_RATE= 0.001)","title":"Run Training and Save Model"},{"location":"#plot-training-loss-and-accuracy","text":"trainer.plot_train_acc_loss()","title":"Plot Training Loss and Accuracy"},{"location":"#plot-confusion-matrix-of-test-data","text":"trainer.plot_confusion_matrix(labelNames,title='Confusion Matrix of Trained Model on Test Dataset')","title":"Plot Confusion matrix of test data"},{"location":"#loading-model-for-prediction","text":"model = mai.load_model_and_weights(modelName = 'PATH_WHERE_MODEL_IS_SAVED_TO')","title":"Loading Model for Prediction"},{"location":"#predict-with-labels","text":"mai.predict_labels(model, testSet.data[0:2], expected_output =testSet.labels[0:2], labelNames=labels, top_preds=3)","title":"Predict With Labels"},{"location":"#get-just-values-of-prediction-without-postprocessing","text":"model.predict(testSet.data[0:2])","title":"Get Just Values of Prediction without postprocessing"},{"location":"#advanced-usage","text":"","title":"Advanced Usage"},{"location":"#code-snippet-for-training-using-medical-ai","text":"## Setup AI Model Manager with required AI. model = mai.modelManager(AI_NAME= AI_NAME, modelName = MODEL_SAVE_NAME, x_train = train_data, OUTPUT_CLASSES = OUTPUT_CLASSES, RETRAIN_MODEL= RETRAIN_MODEL) # Start Training result = mai.train(model, train_data, train_labels, BATCH_SIZE, EPOCHS, LEARNING_RATE, validation_data=(test_data, test_labels), callbacks=['tensorboard']) # Evaluate Trained Model on Test Data model.evaluate(test_data, test_labels) # Plot Accuracy vs Loss for Training mai.plot_training_metrics(result) #Save the Trained Model mai.save_model_and_weights(model, outputName= MODEL_SAVE_NAME)","title":"Code snippet for Training Using Medical-AI"},{"location":"#automated-tests","text":"To Check the tests pytest To See Output of Print Statements pytest -s","title":"Automated Tests"}]}